// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/go/unicode/utf8"

import(
  "tonyfettes/go/slice"
)

// Values
const MaxRune : Char = '􏿿'

const RuneError : Char = '�'

const RuneSelf : Byte = 0x80

const UTFMax : Int = 4

fn decode(BytesView) -> String raise Malformed

fn decode_lossy(@slice.Slice[Byte], ignore_bom? : Bool) -> String

fn decode_rune(@slice.Slice[Byte]) -> (Char, Int)

fn encode(StringView) -> Bytes

fn full_rune(@slice.Slice[Byte]) -> Bool

fn new(Bytes) -> Utf8 raise Malformed

// Errors
pub(all) suberror Malformed BytesView
impl ToJson for Malformed

// Types and methods
type Utf8
fn Utf8::to_bytes(Self) -> Bytes
fn Utf8::to_string(Self) -> String

// Type aliases

// Traits

