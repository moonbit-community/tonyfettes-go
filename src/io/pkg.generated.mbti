// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/go/io"

import(
  "moonbitlang/core/buffer"
  "tonyfettes/go/slice"
)

// Values
fn[R : Reader, W : Writer] copy_n(W, R, Int64) -> Int64 raise

fn limit_reader(&Reader, Int64) -> LimitedReader

fn new_section_reader(&ReaderAt, Int64, Int64) -> SectionReader

fn[R : Reader] read_at_least(R, @slice.Slice[Byte], Int) -> Int raise

fn[R : Reader] read_full(R, @slice.Slice[Byte]) -> Int raise

// Errors
pub(all) suberror EOF

pub(all) suberror InvalidWrite

pub(all) suberror NoProgress

pub(all) suberror SeekError {
  InvalidOffset(Int64)
}

pub(all) suberror ShortBuffer

pub(all) suberror ShortWrite

pub(all) suberror UnexpectedEof

// Types and methods
type LimitedReader
impl Reader for LimitedReader

type SectionReader
fn SectionReader::new(&ReaderAt, Int64, Int64) -> Self
fn SectionReader::size(Self) -> Int64
impl Reader for SectionReader
impl ReaderAt for SectionReader
impl Seeker for SectionReader

pub(all) enum SeekWhence {
  Start
  Current
  End
}

// Type aliases

// Traits
pub(open) trait ByteReader {
  read_byte(Self) -> Byte raise
}

pub(open) trait ByteWriter {
  write_byte(Self, Byte) -> Unit raise
}

pub(open) trait Closer {
  close(Self) -> Unit raise
}

pub(open) trait ReadCloser : Reader + Closer {
}

pub(open) trait ReadSeeker : Reader + Seeker {
}

pub(open) trait ReadWriteCloser : Reader + Writer + Closer {
}

pub(open) trait ReadWriteSeeker : Reader + Writer + Seeker {
}

pub(open) trait ReadWriter : Reader + Writer {
}

pub(open) trait Reader {
  read(Self, @slice.Slice[Byte]) -> Int raise
}

pub(open) trait ReaderAt {
  read_at(Self, @slice.Slice[Byte], Int64) -> Int raise
}

pub(open) trait ReaderFrom {
  read_from(&Reader) -> Int64 raise
}

pub(open) trait Resetter {
  reset(Self, &Reader) -> Unit raise
}

pub(open) trait Seeker {
  seek(Self, Int64, SeekWhence) -> Int64 raise
}

pub(open) trait StringWriter {
  write_string(Self, String) -> Int raise
}

pub(open) trait WriteCloser : Writer + Closer {
}

pub(open) trait WriteSeeker : Writer + Seeker {
}

pub(open) trait WriteTo {
  write_to(&Writer) -> Int64 raise
}

pub(open) trait Writer {
  write(Self, @slice.Slice[Byte]) -> Int raise
}
impl Writer for @buffer.Buffer

pub(open) trait WriterAt {
  write_at(Self, @slice.Slice[Byte], Int64) -> Int raise
}

