// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/go/bytes"

import(
  "tonyfettes/go/io"
  "tonyfettes/go/slice"
)

// Values
fn clone(@slice.Slice[Byte]) -> @slice.Slice[Byte]

fn has_prefix(@slice.Slice[Byte], @slice.Slice[Byte]) -> Bool

fn index_byte(@slice.Slice[Byte], Byte) -> Int

fn new_buffer(@slice.Slice[Byte]) -> Buffer

fn new_reader(@slice.Slice[Byte]) -> Reader

// Errors
type NegativeOffset
impl Show for NegativeOffset

pub suberror TooLarge
impl Show for TooLarge

// Types and methods
type Buffer
fn Buffer::available(Self) -> Int
fn Buffer::available_buffer(Self) -> @slice.Slice[Byte]
fn Buffer::bytes(Self) -> @slice.Slice[Byte]
fn Buffer::cap(Self) -> Int
fn Buffer::grow(Self, Int) -> Unit
fn Buffer::reset(Self) -> Unit
fn Buffer::string(Self) -> String
fn Buffer::truncate(Self, Int) -> Unit
impl Default for Buffer
impl @tonyfettes/go/builtin.Len for Buffer
impl @io.ByteReader for Buffer
impl @io.Reader for Buffer
impl @io.Writer for Buffer
impl @io.WriterTo for Buffer

type Reader
fn Reader::reset(Self) -> Unit
fn Reader::size(Self) -> Int64
impl @tonyfettes/go/builtin.Len for Reader
impl @io.ByteReader for Reader
impl @io.ByteScanner for Reader
impl @io.Reader for Reader
impl @io.ReaderAt for Reader
impl @io.RuneReader for Reader
impl @io.RuneScanner for Reader
impl @io.Seeker for Reader
impl @io.WriterTo for Reader

// Type aliases

// Traits

