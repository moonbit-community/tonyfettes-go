// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/go/debug/pe"

import(
  "tonyfettes/go/debug/dwarf"
  "tonyfettes/go/encoding/binary"
  "tonyfettes/go/io"
  "tonyfettes/go/slice"
)

// Values
const COFF_SYMBOL_SIZE : UInt = 18

const IMAGE_COMDAT_SELECT_ANY : Int = 2

const IMAGE_COMDAT_SELECT_ASSOCIATIVE : Int = 5

const IMAGE_COMDAT_SELECT_EXACT_MATCH : Int = 4

const IMAGE_COMDAT_SELECT_LARGEST : Int = 6

const IMAGE_COMDAT_SELECT_NODUPLICATES : Int = 1

const IMAGE_COMDAT_SELECT_SAME_SIZE : Int = 3

const IMAGE_DIRECTORY_ENTRY_ARCHITECTURE : Int = 7

const IMAGE_DIRECTORY_ENTRY_BASERELOC : Int = 5

const IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT : Int = 11

const IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR : Int = 14

const IMAGE_DIRECTORY_ENTRY_DEBUG : Int = 6

const IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT : Int = 13

const IMAGE_DIRECTORY_ENTRY_EXCEPTION : Int = 3

const IMAGE_DIRECTORY_ENTRY_EXPORT : Int = 0

const IMAGE_DIRECTORY_ENTRY_GLOBALPTR : Int = 8

const IMAGE_DIRECTORY_ENTRY_IAT : Int = 12

const IMAGE_DIRECTORY_ENTRY_IMPORT : Int = 1

const IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG : Int = 10

const IMAGE_DIRECTORY_ENTRY_RESOURCE : Int = 2

const IMAGE_DIRECTORY_ENTRY_SECURITY : Int = 4

const IMAGE_DIRECTORY_ENTRY_TLS : Int = 9

const IMAGE_DLLCHARACTERISTICS_APPCONTAINER : Int = 0x1000

const IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE : Int = 0x0040

const IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY : Int = 0x0080

const IMAGE_DLLCHARACTERISTICS_GUARD_CF : Int = 0x4000

const IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA : Int = 0x0020

const IMAGE_DLLCHARACTERISTICS_NO_BIND : Int = 0x0800

const IMAGE_DLLCHARACTERISTICS_NO_ISOLATION : Int = 0x0200

const IMAGE_DLLCHARACTERISTICS_NO_SEH : Int = 0x0400

const IMAGE_DLLCHARACTERISTICS_NX_COMPAT : Int = 0x0100

const IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE : Int = 0x8000

const IMAGE_DLLCHARACTERISTICS_WDM_DRIVER : Int = 0x2000

const IMAGE_FILE_32BIT_MACHINE : Int = 0x0100

const IMAGE_FILE_AGGRESIVE_WS_TRIM : Int = 0x0010

const IMAGE_FILE_BYTES_REVERSED_HI : Int = 0x8000

const IMAGE_FILE_BYTES_REVERSED_LO : Int = 0x0080

const IMAGE_FILE_DEBUG_STRIPPED : Int = 0x0200

const IMAGE_FILE_DLL : Int = 0x2000

const IMAGE_FILE_EXECUTABLE_IMAGE : Int = 0x0002

const IMAGE_FILE_LARGE_ADDRESS_AWARE : Int = 0x0020

const IMAGE_FILE_LINE_NUMS_STRIPPED : Int = 0x0004

const IMAGE_FILE_LOCAL_SYMS_STRIPPED : Int = 0x0008

const IMAGE_FILE_MACHINE_AM33 : UInt16 = 0x1d3

const IMAGE_FILE_MACHINE_AMD64 : UInt16 = 0x8664

const IMAGE_FILE_MACHINE_ARM : UInt16 = 0x1c0

const IMAGE_FILE_MACHINE_ARM64 : UInt16 = 0xaa64

const IMAGE_FILE_MACHINE_ARMNT : UInt16 = 0x1c4

const IMAGE_FILE_MACHINE_EBC : Int = 0xebc

const IMAGE_FILE_MACHINE_I386 : UInt16 = 0x14c

const IMAGE_FILE_MACHINE_IA64 : UInt16 = 0x200

const IMAGE_FILE_MACHINE_LOONGARCH32 : Int = 0x6232

const IMAGE_FILE_MACHINE_LOONGARCH64 : Int = 0x6264

const IMAGE_FILE_MACHINE_M32R : Int = 0x9041

const IMAGE_FILE_MACHINE_MIPS16 : Int = 0x266

const IMAGE_FILE_MACHINE_MIPSFPU : Int = 0x366

const IMAGE_FILE_MACHINE_MIPSFPU16 : Int = 0x466

const IMAGE_FILE_MACHINE_POWERPC : Int = 0x1f0

const IMAGE_FILE_MACHINE_POWERPCFP : Int = 0x1f1

const IMAGE_FILE_MACHINE_R4000 : Int = 0x166

const IMAGE_FILE_MACHINE_RISCV128 : UInt16 = 0x5128

const IMAGE_FILE_MACHINE_RISCV32 : UInt16 = 0x5032

const IMAGE_FILE_MACHINE_RISCV64 : UInt16 = 0x5064

const IMAGE_FILE_MACHINE_SH3 : Int = 0x1a2

const IMAGE_FILE_MACHINE_SH3DSP : Int = 0x1a3

const IMAGE_FILE_MACHINE_SH4 : Int = 0x1a6

const IMAGE_FILE_MACHINE_SH5 : Int = 0x1a8

const IMAGE_FILE_MACHINE_THUMB : Int = 0x1c2

const IMAGE_FILE_MACHINE_UNKNOWN : UInt16 = 0x0

const IMAGE_FILE_MACHINE_WCEMIPSV2 : Int = 0x169

const IMAGE_FILE_NET_RUN_FROM_SWAP : Int = 0x0800

const IMAGE_FILE_RELOCS_STRIPPED : Int = 0x0001

const IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP : Int = 0x0400

const IMAGE_FILE_SYSTEM : Int = 0x1000

const IMAGE_FILE_UP_SYSTEM_ONLY : Int = 0x4000

const IMAGE_SCN_CNT_CODE : Int64 = 0x00000020

const IMAGE_SCN_CNT_INITIALIZED_DATA : Int64 = 0x00000040

const IMAGE_SCN_CNT_UNINITIALIZED_DATA : Int64 = 0x00000080

const IMAGE_SCN_LNK_COMDAT : Int64 = 0x00001000

const IMAGE_SCN_MEM_DISCARDABLE : Int64 = 0x02000000

const IMAGE_SCN_MEM_EXECUTE : Int64 = 0x20000000

const IMAGE_SCN_MEM_READ : Int64 = 0x40000000

const IMAGE_SCN_MEM_WRITE : Int64 = 0x80000000

const IMAGE_SUBSYSTEM_EFI_APPLICATION : Int = 10

const IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER : Int = 11

const IMAGE_SUBSYSTEM_EFI_ROM : Int = 13

const IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER : Int = 12

const IMAGE_SUBSYSTEM_NATIVE : Int = 1

const IMAGE_SUBSYSTEM_NATIVE_WINDOWS : Int = 8

const IMAGE_SUBSYSTEM_OS2_CUI : Int = 5

const IMAGE_SUBSYSTEM_POSIX_CUI : Int = 7

const IMAGE_SUBSYSTEM_UNKNOWN : Int = 0

const IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION : Int = 16

const IMAGE_SUBSYSTEM_WINDOWS_CE_GUI : Int = 9

const IMAGE_SUBSYSTEM_WINDOWS_CUI : Int = 3

const IMAGE_SUBSYSTEM_WINDOWS_GUI : Int = 2

const IMAGE_SUBSYSTEM_XBOX : Int = 14

fn new_file(&@io.ReaderAt) -> File raise

fn open(String) -> File raise

// Errors

// Types and methods
pub(all) struct COFFSymbol {
  name : FixedArray[Byte]
  value : UInt
  section_number : Int16
  type_ : UInt16
  storage_class : Byte
  number_of_aux_symbols : Byte
  aux_symbols : Array[COFFSymbolAuxFormat5]
}
fn COFFSymbol::full_name(Self, StringTable) -> String raise
impl Default for COFFSymbol
impl Eq for COFFSymbol
impl Show for COFFSymbol
impl ToJson for COFFSymbol
impl @binary.Readable for COFFSymbol

pub struct COFFSymbolAuxFormat5 {
  size : UInt
  num_relocs : UInt16
  num_line_numbers : UInt16
  checksum : UInt
  sec_num : UInt16
  selection : Byte
}
impl Default for COFFSymbolAuxFormat5
impl Eq for COFFSymbolAuxFormat5
impl Show for COFFSymbolAuxFormat5
impl ToJson for COFFSymbolAuxFormat5
impl @binary.Readable for COFFSymbolAuxFormat5

pub(all) struct DataDirectory {
  virtual_address : UInt
  size : UInt
}
impl Default for DataDirectory
impl Eq for DataDirectory
impl Show for DataDirectory
impl ToJson for DataDirectory

pub struct File {
  mut file_header : FileHeader
  mut optional_header : OptionalHeader?
  sections : Array[Section]
  mut symbols : Array[Symbol]
  mut coff_symbols : Array[COFFSymbol]
  mut string_table : StringTable
  // private fields
}
fn File::close(Self) -> Unit raise
fn File::coff_symbol_read_section_def_aux(Self, Int) -> COFFSymbolAuxFormat5 raise
fn File::dwarf(Self) -> @dwarf.Data raise
fn File::imported_libraries(Self) -> Array[String]
fn File::imported_symbols(Self) -> Array[String] raise
fn File::section(Self, String) -> Section?

pub(all) struct FileHeader {
  machine : UInt16
  number_of_sections : UInt16
  time_date_stamp : UInt
  pointer_to_symbol_table : UInt
  number_of_symbols : UInt
  size_of_optional_header : UInt16
  characteristics : UInt16
}
impl Eq for FileHeader
impl Show for FileHeader
impl ToJson for FileHeader
impl @binary.Readable for FileHeader
impl @binary.Sized for FileHeader

pub(all) struct FormatError {
}
fn FormatError::error(Self) -> String
impl Eq for FormatError
impl Show for FormatError
impl ToJson for FormatError

pub struct ImportDirectory {
  original_first_thunk : UInt
  time_date_stamp : UInt
  forwarder_chain : UInt
  name : UInt
  first_thunk : UInt
  // private fields
}
impl Default for ImportDirectory
impl Eq for ImportDirectory
impl Show for ImportDirectory
impl ToJson for ImportDirectory

type NobitsSectionReader
impl @io.ReaderAt for NobitsSectionReader

pub(all) enum OptionalHeader {
  Header32(OptionalHeader32)
  Header64(OptionalHeader64)
}
impl Eq for OptionalHeader
impl Show for OptionalHeader
impl ToJson for OptionalHeader

pub(all) struct OptionalHeader32 {
  magic : UInt16
  major_linker_version : Byte
  minor_linker_version : Byte
  size_of_code : UInt
  size_of_initialized_data : UInt
  size_of_uninitialized_data : UInt
  address_of_entry_point : UInt
  base_of_code : UInt
  base_of_data : UInt
  image_base : UInt
  section_alignment : UInt
  file_alignment : UInt
  major_operating_system_version : UInt16
  minor_operating_system_version : UInt16
  major_image_version : UInt16
  minor_image_version : UInt16
  major_subsystem_version : UInt16
  minor_subsystem_version : UInt16
  win32_version_value : UInt
  size_of_image : UInt
  size_of_headers : UInt
  check_sum : UInt
  subsystem : UInt16
  dll_characteristics : UInt16
  size_of_stack_reserve : UInt
  size_of_stack_commit : UInt
  size_of_heap_reserve : UInt
  size_of_heap_commit : UInt
  loader_flags : UInt
  number_of_rva_and_sizes : UInt
  data_directory : FixedArray[DataDirectory]
}
impl Default for OptionalHeader32
impl Eq for OptionalHeader32
impl Show for OptionalHeader32
impl ToJson for OptionalHeader32

pub(all) struct OptionalHeader64 {
  magic : UInt16
  major_linker_version : Byte
  minor_linker_version : Byte
  size_of_code : UInt
  size_of_initialized_data : UInt
  size_of_uninitialized_data : UInt
  address_of_entry_point : UInt
  base_of_code : UInt
  image_base : Int64
  section_alignment : UInt
  file_alignment : UInt
  major_operating_system_version : UInt16
  minor_operating_system_version : UInt16
  major_image_version : UInt16
  minor_image_version : UInt16
  major_subsystem_version : UInt16
  minor_subsystem_version : UInt16
  win32_version_value : UInt
  size_of_image : UInt
  size_of_headers : UInt
  check_sum : UInt
  subsystem : UInt16
  dll_characteristics : UInt16
  size_of_stack_reserve : UInt64
  size_of_stack_commit : UInt64
  size_of_heap_reserve : UInt64
  size_of_heap_commit : UInt64
  loader_flags : UInt
  number_of_rva_and_sizes : UInt
  data_directory : FixedArray[DataDirectory]
}
impl Eq for OptionalHeader64
impl Show for OptionalHeader64
impl ToJson for OptionalHeader64

pub struct Reloc {
  virtual_address : UInt
  symbol_table_index : UInt
  type_ : UInt16
}
impl Default for Reloc
impl Eq for Reloc
impl Show for Reloc
impl ToJson for Reloc
impl @binary.Readable for Reloc

pub struct Section {
  section_header : SectionHeader
  mut relocs : Array[Reloc]
  reader_at : &@io.ReaderAt
  sr : @io.SectionReader
}
fn Section::data(Self) -> @slice.Slice[Byte] raise
fn Section::open(Self) -> &@io.ReadSeeker

pub(all) struct SectionHeader {
  name : String
  virtual_size : UInt
  virtual_address : UInt
  size : UInt
  offset : UInt
  pointer_to_relocations : UInt
  pointer_to_line_numbers : UInt
  number_of_relocations : UInt16
  number_of_line_numbers : UInt16
  characteristics : UInt
}
impl Eq for SectionHeader
impl Show for SectionHeader
impl ToJson for SectionHeader

type SectionHeader32
impl Default for SectionHeader32
impl Eq for SectionHeader32
impl Show for SectionHeader32
impl ToJson for SectionHeader32
impl @binary.Readable for SectionHeader32

pub struct StringTable(@slice.Slice[Byte])
#deprecated
fn StringTable::inner(Self) -> @slice.Slice[Byte]
fn StringTable::string(Self, UInt) -> String raise
impl Eq for StringTable
impl Show for StringTable
impl ToJson for StringTable
impl @tonyfettes/go/builtin.Len for StringTable

pub(all) struct Symbol {
  name : String
  value : UInt
  section_number : Int16
  type_ : Int16
  storage_class : Byte
}
impl Eq for Symbol
impl Show for Symbol
impl ToJson for Symbol

// Type aliases

// Traits

