// Generated using `moon info`, DON'T EDIT IT
package "tonyfettes/go/debug/dwarf"

import(
  "tonyfettes/go/slice"
)

// Values
fn new(abbrev~ : @slice.Slice[Byte], aranges~ : @slice.Slice[Byte], frame~ : @slice.Slice[Byte], info~ : @slice.Slice[Byte], line~ : @slice.Slice[Byte], pubnames~ : @slice.Slice[Byte], ranges~ : @slice.Slice[Byte], str~ : @slice.Slice[Byte]) -> Data raise

// Errors
pub suberror DecodeError {
  DecodeError(name~ : String, offset~ : UInt, String)
}
fn DecodeError::new(String, UInt, String) -> Self
impl Show for DecodeError

pub suberror UnknownPCError

// Types and methods
pub enum Attr {
  Attr(UInt)
  AttrSibling
  AttrLocation
  AttrName
  AttrOrdering
  AttrByteSize
  AttrBitOffset
  AttrBitSize
  AttrStmtList
  AttrLowpc
  AttrHighpc
  AttrLanguage
  AttrDiscr
  AttrDiscrValue
  AttrVisibility
  AttrImport
  AttrStringLength
  AttrCommonRef
  AttrCompDir
  AttrConstValue
  AttrContainingType
  AttrDefaultValue
  AttrInline
  AttrIsOptional
  AttrLowerBound
  AttrProducer
  AttrPrototyped
  AttrReturnAddr
  AttrStartScope
  AttrStrideSize
  AttrUpperBound
  AttrAbstractOrigin
  AttrAccessibility
  AttrAddrClass
  AttrArtificial
  AttrBaseTypes
  AttrCalling
  AttrCount
  AttrDataMemberLoc
  AttrDeclColumn
  AttrDeclFile
  AttrDeclLine
  AttrDeclaration
  AttrDiscrList
  AttrEncoding
  AttrExternal
  AttrFrameBase
  AttrFriend
  AttrIdentifierCase
  AttrMacroInfo
  AttrNamelistItem
  AttrPriority
  AttrSegment
  AttrSpecification
  AttrStaticLink
  AttrType
  AttrUseLocation
  AttrVarParam
  AttrVirtuality
  AttrVtableElemLoc
  AttrAllocated
  AttrAssociated
  AttrDataLocation
  AttrStride
  AttrEntrypc
  AttrUseUTF8
  AttrExtension
  AttrRanges
  AttrTrampoline
  AttrCallColumn
  AttrCallFile
  AttrCallLine
  AttrDescription
  AttrBinaryScale
  AttrDecimalScale
  AttrSmall
  AttrDecimalSign
  AttrDigitCount
  AttrPictureString
  AttrMutable
  AttrThreadsScaled
  AttrExplicit
  AttrObjectPointer
  AttrEndianity
  AttrElemental
  AttrPure
  AttrRecursive
  AttrSignature
  AttrMainSubprogram
  AttrDataBitOffset
  AttrConstExpr
  AttrEnumClass
  AttrLinkageName
  AttrStringLengthBitSize
  AttrStringLengthByteSize
  AttrRank
  AttrStrOffsetsBase
  AttrAddrBase
  AttrRnglistsBase
  AttrDwoName
  AttrReference
  AttrRvalueReference
  AttrMacros
  AttrCallAllCalls
  AttrCallAllSourceCalls
  AttrCallAllTailCalls
  AttrCallReturnPC
  AttrCallValue
  AttrCallOrigin
  AttrCallParameter
  AttrCallPC
  AttrCallTailCall
  AttrCallTarget
  AttrCallTargetClobbered
  AttrCallDataLocation
  AttrCallDataValue
  AttrNoreturn
  AttrAlignment
  AttrExportSymbols
  AttrDeleted
  AttrDefaulted
  AttrLoclistsBase
}
fn Attr::from_uint(UInt) -> Self
fn Attr::to_uint(Self) -> UInt
impl Eq for Attr
impl Show for Attr

pub(all) enum BasicType {
  CharType
  UcharType
  IntType
  UintType
  FloatType
  ComplexType
  BoolType
  AddrType
  UnspecifiedType
}

type Buf

pub enum ByteOrder {
  LittleEndian
  BigEndian
}
impl Eq for ByteOrder
impl Show for ByteOrder

pub enum Class {
  ClassUnknown
  ClassAddress
  ClassBlock
  ClassConstant
  ClassExprLoc
  ClassFlag
  ClassLinePtr
  ClassLocListPtr
  ClassMacPtr
  ClassRangeListPtr
  ClassReference
  ClassReferenceSig
  ClassString
  ClassReferenceAlt
  ClassStringAlt
  ClassAddrPtr
  ClassLocList
  ClassRngList
  ClassRngListsPtr
  ClassStrOffsetsPtr
}
impl Eq for Class
impl Show for Class

pub(all) enum CommonType {
  BasicType(mut bit_size~ : Int64, mut bit_offset~ : Int64, mut data_bit_offset~ : Int64, BasicType)
  QualType(qual~ : String, mut type_~ : Type)
  ArrayType(mut type_~ : Type, mut stride_bit_size~ : Int64, mut count~ : Int64)
  VoidType
  PtrType(mut type_~ : Type)
  StructType(struct_name~ : String, kind~ : String, fields~ : Array[StructField], incomplete~ : Bool)
  EnumType(enum_name~ : String, val~ : Array[EnumValue])
  FuncType(mut return_type~ : Type?, param_type~ : Array[Type])
  DotDotDotType
  TypedefType(mut type_~ : Type)
  UnsupportedType(tag~ : Tag)
}

type Data
fn Data::add_section(Self, String, @slice.Slice[Byte]) -> Unit
fn Data::add_types(Self, String, @slice.Slice[Byte]) -> Unit raise
fn Data::line_reader(Self, Entry) -> LineReader? raise
fn Data::ranges(Self, Entry) -> Array[(UInt64, UInt64)] raise
fn Data::reader(Self) -> Reader raise
fn Data::type_(Self, UInt) -> Type raise
impl Default for Data

pub struct Entry {
  offset : UInt
  tag : Tag
  children : Bool
  field : Array[Field]
}
fn Entry::attr_field(Self, Attr) -> Field?
fn Entry::new(UInt, Tag, Bool) -> Self
fn Entry::val(Self, Attr) -> FieldValue?
impl Show for Entry

pub(all) struct EnumType {
  common : CommonType
  enum_name : String
  val : Array[EnumValue]
}

pub(all) struct EnumValue {
  name : String
  val : Int64
}

pub struct Field {
  attr : Attr
  val : FieldValue
  class : Class
}
fn Field::new(Attr, FieldValue, Class) -> Self
impl Show for Field

pub enum FieldValue {
  UInt64(UInt64)
  Bytes(@slice.Slice[Byte])
  Bool(Bool)
  Int64(Int64)
  String(String)
  Offset(UInt)
}
impl Show for FieldValue

pub enum Format {
  FormAddr
  FormDwarfBlock2
  FormDwarfBlock4
  FormData2
  FormData4
  FormData8
  FormString
  FormDwarfBlock
  FormDwarfBlock1
  FormData1
  FormFlag
  FormSdata
  FormStrp
  FormUdata
  FormRefAddr
  FormRef1
  FormRef2
  FormRef4
  FormRef8
  FormRefUdata
  FormIndirect
  FormSecOffset
  FormExprloc
  FormFlagPresent
  FormRefSig8
  FormStrx
  FormAddrx
  FormRefSup4
  FormStrpSup
  FormData16
  FormLineStrp
  FormImplicitConst
  FormLoclistx
  FormRnglistx
  FormRefSup8
  FormStrx1
  FormStrx2
  FormStrx3
  FormStrx4
  FormAddrx1
  FormAddrx2
  FormAddrx3
  FormAddrx4
  FormGnuRefAlt
  FormGnuStrpAlt
  Format(UInt)
}
impl Eq for Format
impl Show for Format

pub struct LineEntry {
  mut address : UInt64
  mut op_index : Int
  mut file : LineFile?
  mut line : Int
  mut column : Int
  mut is_stmt : Bool
  mut basic_block : Bool
  mut prologue_end : Bool
  mut epilogue_begin : Bool
  mut isa : Int
  mut discriminator : Int
  mut end_sequence : Bool
}
impl Show for LineEntry

pub struct LineFile {
  name : StringView
  mtime : UInt64
  length : Int
}
impl Show for LineFile

pub struct LineReader {
  buf : Buf
  section : @slice.Slice[Byte]
  str : @slice.Slice[Byte]
  line_str : @slice.Slice[Byte]
  mut version : UInt
  mut addrsize : Int
  mut segment_selector_size : Int
  mut min_instruction_length : Int
  mut max_ops_per_instruction : Int
  mut default_is_stmt : Bool
  mut line_base : Int
  mut line_range : Int
  mut opcode_base : Int
  mut opcode_lengths : Array[Int]
  mut directories : Array[StringView]
  mut file_entries : Array[LineFile?]
  mut program_offset : UInt
  mut end_offset : UInt
  mut initial_file_entries : Int
  mut state : LineEntry
  mut file_index : Int
}
fn LineReader::files(Self) -> Array[LineFile?]
fn LineReader::next(Self, LineEntry) -> Unit raise
fn LineReader::reset(Self) -> Unit
fn LineReader::seek(Self, LineReaderPos) -> Unit
fn LineReader::seek_pc(Self, UInt64, LineEntry) -> Unit raise
fn LineReader::tell(Self) -> LineReaderPos

type LineReaderPos

type Reader
fn Reader::address_size(Self) -> Int
fn Reader::byte_order(Self) -> ByteOrder
fn Reader::next(Self) -> Entry? raise
fn Reader::seek(Self, UInt) -> Unit raise
fn Reader::seek_pc(Self, UInt64) -> Entry? raise
fn Reader::skip_children(Self) -> Unit raise

pub(all) struct StructField {
  mut name : String
  mut type_ : Type
  mut byte_offset : Int64
  mut byte_size : Int64
  mut bit_offset : Int64
  mut data_bit_offset : Int64
  mut bit_size : Int64
}

pub enum Tag {
  TagArrayType
  TagClassType
  TagEntryPoint
  TagEnumerationType
  TagFormalParameter
  TagImportedDeclaration
  TagLabel
  TagLexDwarfBlock
  TagMember
  TagPointerType
  TagReferenceType
  TagCompileUnit
  TagStringType
  TagStructType
  TagSubroutineType
  TagTypedef
  TagUnionType
  TagUnspecifiedParameters
  TagVariant
  TagCommonDwarfBlock
  TagCommonInclusion
  TagInheritance
  TagInlinedSubroutine
  TagModule
  TagPtrToMemberType
  TagSetType
  TagSubrangeType
  TagWithStmt
  TagAccessDeclaration
  TagBaseType
  TagCatchDwarfBlock
  TagConstType
  TagConstant
  TagEnumerator
  TagFileType
  TagFriend
  TagNamelist
  TagNamelistItem
  TagPackedType
  TagSubprogram
  TagTemplateTypeParameter
  TagTemplateValueParameter
  TagThrownType
  TagTryDwarfBlock
  TagVariantPart
  TagVariable
  TagVolatileType
  TagDwarfProcedure
  TagRestrictType
  TagInterfaceType
  TagNamespace
  TagImportedModule
  TagUnspecifiedType
  TagPartialUnit
  TagImportedUnit
  TagMutableType
  TagCondition
  TagSharedType
  TagTypeUnit
  TagRvalueReferenceType
  TagTemplateAlias
  TagCoarrayType
  TagGenericSubrange
  TagDynamicType
  TagAtomicType
  TagCallSite
  TagCallSiteParameter
  TagSkeletonUnit
  TagImmutableType
  Tag(UInt)
}
fn Tag::from_uint(UInt) -> Self?
fn Tag::to_uint(Self) -> UInt
impl Eq for Tag
impl Show for Tag

pub(all) enum Type {
  CommonType(mut byte_size~ : Int64, mut name~ : String, CommonType)
}
fn Type::common_type(CommonType) -> Self
fn Type::size(Self) -> Int64
impl Show for Type

// Type aliases
pub typealias UInt as Offset

// Traits

